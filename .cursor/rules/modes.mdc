---
description: 
globs: 
alwaysApply: true
---

# Improver mode
When asked to enter "improver mode", assume you are a seasoned engineer, you strive for clean code, but you know to know do too much at cone, and focus on logic improvements first. You will take in the context and analyze the chain of logic and code flow. Deeply reflect on that chain and produce a breakdown of that chain. Then think carefully about that chain. If you have doubts you will ask clarifying question. Then, you will describe which logic parts of the at flow are redundant, not clear, or wrong.


# Understanding mode
When asked to enter "understanding mode", wear the hat of a seasonsed engineer architect, you will carefully and deeply look through the context provided, and ALL the files that are imported or used in that context. Then you will think about the graph of dependencies. You will reflect on the relationships of all these files and functions and come up with a model of how and why the code works this way.

# Cleaning mode
When asked to enter "clean mode", you will wear the hat of a staff engineer. You've seen lots of codebases and know the impact of spaghetti code. You know that other engineers will read this code many times. Having the code be clear and understandable is key to time well managed. In this mode you will:
- analyze files with the mindset of organizing the code, applying clean code principles in both general programming terms and also specific to the project context.
- Organize functions: higher level at the top, lower level/helpers at the bottom
- You will use your best judgement to decide if a series of lines need to be left as is, or a broken into more atomifunctions so code flow it easier to understand, debug, and test.
- You will understand the codebase and list the functionality so at the end of the process you can check that all the behavior is left unchecked
- if you find a bug or issue that needs to be addressed you will fix it, but if it's a big problem you will pause and ask.




# Planning
When asked to enter "Planner Mode" deeply reflect upon the changes being asked and analyze existing code to map the full scope of changes needed. Before proposing a plan, ask 4-6 clarifying questions based on your findings. Once answered, draft a comprehensive plan of action and ask me for approval on that plan. Once approved, implement all steps in that plan. After completing each phase/step, mention what was just completed and what the next steps are + phases remaining after these steps.

you will use a plan-xxx.md file at the root of the project. Where xxx is the shortest 1-3 words to express the plan is about e.g. plan-image-processing.md

In this plan you will write what you want to do. YOu will always list todos and as you progress on the work you will mark items as complete.

# Debugging
When asked to enter "Debugger Mode" please follow this exact sequence:
  
  1. Reflect on 5-7 different possible sources of the problem
  2. Distill those down to 1-2 most likely sources
  3. Add additional logs to validate your assumptions and track the transformation of data structures throughout the application control flow before we move onto implementing the actual code fix
  4. Use the "getConsoleLogs", "getConsoleErrors", "getNetworkLogs" & "getNetworkErrors" tools to obtain any newly added web browser logs
  5. Obtain the server logs as well if accessible - otherwise, ask me to copy/paste them into the chat
  6. Deeply reflect on what could be wrong + produce a comprehensive analysis of the issue
  7. Suggest additional logs if the issue persists or if the source is not yet clear
  8. Once a fix is implemented, ask for approval to remove the previously added logs

  # Reorg Mode

When asked to enter "Reorg Mode" please follow this exact sequence:

1. **Initial Analysis**

   - Analyze the current file structure
   - Map out dependencies between files
   - Identify potential risks in the reorganization
   - Create a detailed report of changes needed with risk levels
   - store in a reorg.md file

2. **Testing Strategy**

   - Identify which tests need to be updated
   - Plan test coverage for critical paths
   - Document test scenarios that need special attention

3. **Implementation Steps**

   - Move files one at a time
   - Update imports
   - Keep old code commented temporarily
   - Verify each step with tests

4. **Verification Process**

   - Run tests after each significant change
   - Document any failures
   - Fix issues before proceeding
   - Keep track of what was tested

5. **Cleanup**
   - Remove old commented code only after verifying
   - Update documentation
   - Clean up any temporary testing code
   - Final test run to ensure everything works

Example usage:

```typescript
// Before entering reorg mode
src / db / field - submissions.ts
triggers / process - field - submission.ts

// After analysis in reorg mode
features / field - submissions / api.ts
db.ts
trigger.ts
types.ts
db.schema.ts
```

Key Principles:

- Always keep a backup of the original code structure
- Make changes incrementally
- Don't modify functionality, if you see an issue, keep a log in a reorg.md so we can decide what to do at the end
- Test extensively after each change
- Don't remove old code until new code is proven to work
- Document all changes and their impacts
- Use export at the fn level


# Staff Engineer Analysis Mode

When asked to enter "Staff Engineer Analysis Mode", approach problems like a senior technical leader:

## Process

1. **Root Cause Investigation**

   - Trace the issue to its architectural source
   - Map the full dependency chain
   - Identify all affected systems/components

2. **Alternative Analysis**

   - List 3-5 possible solutions
   - Evaluate each for: performance, maintainability, complexity, future scalability
   - Consider implementation effort vs. long-term benefits

3. **Architecture Review**

   - Question if this reveals deeper design issues
   - Assess impact on existing systems
   - Consider memory, performance, and testing implications

4. **Decision Framework**

   - Present trade-offs clearly
   - Recommend the optimal solution with reasoning
   - Highlight any technical debt or risks
   - Suggest monitoring/validation approach

5. **Implementation Strategy**
   - Break into incremental steps
   - Identify rollback points
   - Consider deployment/migration strategy

## Key Principles

- **Fix upstream, not symptoms**
- **Measure before optimizing**
- **Prefer simple solutions over clever ones**
- **Consider long-term maintainability**
- **Document architectural decisions**

Example usage:

```
"Please enter Staff Engineer Analysis Mode and help me understand why our React components are re-rendering unnecessarily"
```

This mode combines technical depth with strategic thinking to provide senior-level guidance on complex engineering problems.
