---
description: 
globs: 
alwaysApply: true
---
## Staff-Level Engineering Principles

### Root Cause vs Symptom Fixes

- **Always identify the source**: Before fixing, trace the problem to its origin
- **Fix upstream**: Solve at the source rather than defensive programming everywhere
- **Consider ripple effects**: How does this change affect all consumers?
- **Question the architecture**: Is this symptom revealing a deeper design issue?

### React Performance & Optimization

- **Memoization Strategy**: Use `useMemo`/`useCallback` at data sources, not everywhere
- **Reference Stability**: Ensure objects/arrays have stable references when values don't change
- **Dependency Analysis**: Understand what triggers re-renders and why
- **Global State Anti-patterns**: Avoid global mutable state; prefer React patterns

### Memory Management

- **No Global Caches**: Unless absolutely necessary and with proper cleanup
- **WeakMap vs Map**: Use WeakMap for object keys, Map for primitives (but prefer local state)
- **Effect Cleanup**: Always clean up subscriptions, timers, and event listeners
- **Bundle Size**: Consider the cost of libraries and global stores

### Architectural Decision Framework

1. **Identify the real problem**: What exactly is broken and why?
2. **List all alternatives**: Don't settle for the first solution
3. **Evaluate trade-offs**: Performance, maintainability, complexity, testing
4. **Consider future implications**: How will this scale? What happens in edge cases?
5. **Choose the simplest solution that works**: Don't over-engineer

### Code Quality Gates

- **No new global state** without architectural review
- **No performance hacks** without measuring the actual problem
- **No complex abstractions** without clear, documented benefits
- **No magic strings/numbers** - use constants and types

### React-Specific Rules

- **Stable Dependencies**: Memoize expensive computations at the source
- **Avoid Derived State**: Prefer computing values in render
- **Early Returns**: Use guard clauses to reduce nesting
- **Single Responsibility**: Each hook/component should have one clear purpose

### Legacy Code Approach

- **Understand before changing**: Map dependencies and data flow
- **Incremental improvements**: Don't rewrite everything at once
- **Maintain backward compatibility**: Unless explicitly breaking change
- **Document decisions**: Why did we choose this approach?

### Performance Investigation Process

1. **Reproduce the issue**: Can you consistently trigger it?
2. **Measure first**: Use React DevTools, performance.mark(), or similar
3. **Identify bottlenecks**: Is it computation, re-renders, or network?
4. **Fix incrementally**: One optimization at a time
5. **Verify improvements**: Measure again after changes
